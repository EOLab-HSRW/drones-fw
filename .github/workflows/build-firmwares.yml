name: Generate Firmwares

on:
  push:
    branches:
      - main
    paths:
      - eolab_drones/catalog/**
      - .github/workflows/build-firmwares.yml
  workflow_dispatch:  # Manual trigger

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set build matrix
        id: set-matrix
        run: |
          echo "Determining build matrix..."

          get_all_drones() {
            find eolab_drones/catalog/drones -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | jq -R -s -c 'split("\n") | map(select(. != ""))'
          }

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Manual trigger: build all drones"
            all_drones=$(get_all_drones)
            echo "matrix=$all_drones" >> $GITHUB_OUTPUT
            exit 0
          fi

          changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          echo "$changed_files"

          # Check if any file in global components changed
          if echo "$changed_files" | grep -q "^eolab_drones/catalog/components/"; then
            echo "Global component changed: build all drones"
            all_drones=$(get_all_drones)
            echo "matrix=$all_drones" >> $GITHUB_OUTPUT
            exit 0
          fi

          changed_drones=$(echo "$changed_files" | grep '^eolab_drones/catalog/drones/' | cut -d/ -f4 | sort -u)
          drone_matrix=$(echo "$changed_drones" | jq -R -s -c 'split("\n") | map(select(. != ""))')

          echo "matrix=$drone_matrix" >> $GITHUB_OUTPUT
  build:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.matrix != '[]' }}
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/eolab-hsrw/easy-px4:ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        drone: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install eolab_drones
        run: |
          pip install .
      - name: Make env available
        run: echo "PYTHONPATH=$PYTHONPATH:/root/.local/lib/python3.10/site-packages/" >> $GITHUB_ENV
      - name: Configure Git committer
        run: |
          git config --global user.email "github-actions[bot]"
          git config --global user.name "GitHub Actions Bot"
      - name: Build ${{ matrix.drone }}
        id: build-step
        run: |
          set +e
          DEBUG=1 eolab_drones build --type firmware --drone ${{ matrix.drone }}
          echo $? > build_exit_code.txt
          set -e
      - name: Write outcome file
        if: ${{ always() }}
        run: |
          exit_code=$(cat build_exit_code.txt)

          outcome="success"

          if [ "$exit_code" -ne 0 ]; then

            outcome="failure"
          fi
          jq -cn --arg drone "${{ matrix.drone }}" --arg outcome "$outcome" '{drone: $drone, outcome: $outcome}' > outcome.json
      - name: Upload outcome artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: outcome-${{ matrix.drone }}
          path: outcome.json
      - name: Delete old firmware for ${{ matrix.drone }}
        if: ${{ success() }}
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: latest
          fail-if-no-assets: false
          assets: '${{ matrix.drone }}.px4'
      - name: Release
        uses: softprops/action-gh-release@v1
        if: ${{ success() }}
        with:
          files: "${{ matrix.drone}}.px4"
          tag_name: latest
          name: Latest Firmwares
          draft: false
          body: "This is an auto-generated set of our latest firmwares for all our drones"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  collect-successes:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      successful_drones: ${{ steps.collect.outputs.successful_drones }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./outcomes
      - id: collect
        run: |
          successful=$(jq -c --slurp '[.[] | select(.outcome=="success") | .drone]' ./outcomes/*)
          echo "successful_drones=$successful" >> $GITHUB_OUTPUT
  trigger-dispatch:
    needs: collect-successes
    runs-on: ubuntu-latest
    if: ${{ needs.collect-successes.outputs.successful_drones != '[]' }}
    steps:
      - name: Repository Dispatch with successful drones
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: firmware-built
          client-payload: |
            {
              "successful_drones": ${{ needs.collect-successes.outputs.successful_drones }}
            }
